#!/usr/bin/env ruby
# coding: utf-8
#
# Copyright Â© 2016 Vista Higher Learning, Inc.
#
# This file is part of passenger_status_check.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'barman_check'
require 'optparse'
require 'pp'

# Default thresholds
# - backup count: 3
# - backup age (hours): 25

options = {
  formatter: :barman_check_mk,
  db_name: '',
  thresholds: {
    bu_count: 3,
    bu_age: 25
  },
  formatter_options: { tags: ['testing'] }
}
# Currently it has not been defined how the tags on Datadog will be setup.

OptionParser.new do |opts|
  opts.banner = 'Usage: barman_check [options]'

  opts.on_tail('-v', '--version', 'Show version') do
    puts "barman_check#{BarmanCheck::VERSION}"
    exit
  end

  opts.on('--db', '--db-name=db', 'Specify name of PostgreSQL db') do |db|
    options[:db_name] = db
  end

  opts.on('-f', '--formatter=f', 'Specify formatter') do |f|
    options[:formatter] = f
  end

  opts.on('--bc', '--backup-count=bc', 'Specify required number of backups') do |bc|
    options[:thresholds][:bu_count] = bc.to_i
  end

  opts.on('--ba', '--backup-age=ba', 'Specify minimum backup age in hours') do |ba|
    options[:thresholds][:bu_age] = ba.to_i
  end

  opts.on('--tg', '--tags=[tag_1,tag_2]', Array, 'Specify tags to be used in Datadog') do |list|
    raise ArgumentError, "Specify tags to be used in Datadog" if list.empty?
    options[:formatter_options][:tags] = list
  end

end.parse!

# if a dbname is provided then it will make actual barman check and barman list calls"
if options[:db_name].length > 0
  check_data_string = `barman check #{options[:db_name]}`
  check_data= check_data_string.split(/\n/).map(&:strip)
  list_data_string = `barman list-backup main`
  list_data= list_data_string.split(/\n/).map(&:strip)
else # no dbname so we are in test mode
  # read cat of test file containing barman output results
  barman_output_data = ARGF.read.chomp
  # check command results delimited from list command results by a line with the string
  a, b = barman_output_data.split("FILE_DELIMITER\n")
  check_data= a.split(/\n/).map(&:strip)
  list_data =b.split(/\n/).map(&:strip)
end

print barman_check = BarmanCheck.run(options[:formatter],
                                     options[:thresholds],
                                     check_data,
                                     list_data,
                                     options[:formatter_options])

